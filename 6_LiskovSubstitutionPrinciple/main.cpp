#include <iostream>

using namespace std;

/*
* 里氏替换原则（Liskov Substitution Principle）：子类一定能够替换掉他们的父类型
* 一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类和子类对象的区别。也就是说在程序里面将父类替换成子类，程序的行为没有变化
* 只有当子类可以替换掉父类，软件单位的功能不受到影响的时候，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为
* 正是由于子类型的可替换性才使得父类类型的木块在无需修改的情况下就可以扩展
* 
* 依赖倒转其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要。
* 如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是中止于抽象类或者接口，那就是面向对象的设计。
*/






int main()
{


	return 0;
}
